name: Deploy Laravel to Azure VM and Analyze with SonarCloud

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install npm dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          printf "%s\n" "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          echo -e "Host *\n  StrictHostKeyChecking no" > ~/.ssh/config

      - name: Deploy with rsync
        run: |
          rsync -avz --no-perms --no-owner --no-group --delete \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            --exclude='.git' \
            --exclude='.env' \
            --exclude='storage/*' \
            --exclude='node_modules' \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/laravel-app/

      - name: Remote Setup & Deploy
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e

            echo "üõ†Ô∏è Installing PHP 8.2 and extensions..."
            sudo apt-get update
            sudo apt-get install -y software-properties-common
            sudo add-apt-repository ppa:ondrej/php -y
            sudo apt-get update

            sudo apt-get install -y php8.2 php8.2-cli php8.2-mbstring php8.2-xml php8.2-bcmath php8.2-curl php8.2-zip php8.2-mysql php8.2-sqlite3 unzip curl

            echo "üõ†Ô∏è Installing Node.js and npm..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
            which npm
            npm -v

            echo "üîß Setting PHP 8.2 as default..."
            sudo update-alternatives --set php /usr/bin/php8.2
            php -v

            cd ~/laravel-app

            echo "üîß Fixing permissions..."
            sudo chown -R $USER:www-data storage bootstrap/cache
            sudo chmod -R ug+rwx storage bootstrap/cache

            echo "üå± Setting up environment..."
            if [ ! -f .env ]; then
              cp .env.example .env
              php artisan key:generate
            fi

            echo "üì¶ Installing Composer (if needed)..."
            if ! command -v composer &> /dev/null; then
              php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
              php composer-setup.php
              sudo mv composer.phar /usr/local/bin/composer
              sudo chmod +x /usr/local/bin/composer
              rm composer-setup.php
            fi

            echo "üì¶ Installing Laravel dependencies..."
            composer install --optimize-autoloader --ignore-platform-reqs

            echo "üì¶ Installing test dependencies..."
            composer require pestphp/pest pestphp/pest-plugin-laravel --dev --no-interaction --ignore-platform-reqs

            echo "üóÉÔ∏è Migrating database..."
            php artisan cache:table || true
            php artisan session:table || true
            php artisan migrate --force

            echo "üìÅ Ensuring compiled view directory exists..."
            mkdir -p storage/framework/views


            echo "üßπ Clearing caches..."
            php artisan config:clear
            php artisan cache:clear
            php artisan view:clear
          EOF

      - name: Start Laravel App
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            echo "üöÄ Starting Laravel dev server and Vite..."

            cd ~/laravel-app

            # Stop previous Laravel dev server (if any)
            sudo pkill -f "php artisan serve" || true
            nohup php artisan serve --host=0.0.0.0 --port=8080 > ~/laravel.log 2>&1 &

            # Stop previous Vite dev server (if any)
            sudo pkill -f "vite" || true

            echo "üîç Finding npm path..."
            NPM_PATH=$(which npm)
            echo "Using npm at: $NPM_PATH"
            nohup $NPM_PATH run dev -- --host 0.0.0.0 --port 8080 > ~/vite.log 2>&1 &

            sleep 10  # ‚è≥ Tunggu proses server siap

            echo "üß™ Verifying Laravel server..."
            if curl -s http://localhost:8080 | grep -q '<!DOCTYPE'; then
              echo "‚úÖ Laravel server is running."
            else
              echo "‚ùå Laravel server might not be running properly."
              tail -n 20 ~/laravel.log
              exit 1
            fi

            echo "üß™ Verifying Vite dev server..."
            if curl -s http://localhost:8080/@vite/client | grep -q 'vite'; then
              echo "‚úÖ Vite dev server is running."
            else
              echo "‚ùå Vite dev server might not be running properly."
              tail -n 20 ~/vite.log
              exit 1
            fi

            echo ""
            echo "üåê You can now access the app at:"
            echo "‚û°Ô∏è  Laravel: http://${{ secrets.SSH_HOST }}:8080"
            echo "‚û°Ô∏è  Vite client: http://${{ secrets.SSH_HOST }}:8080/@vite/client"
          EOF

      - name: Run Tests and Generate Coverage
        continue-on-error: true
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set +e
            cd ~/laravel-app
            ./vendor/bin/pest --coverage-html=coverage-report --coverage-clover=coverage.xml || true
            if [ -f coverage.xml ]; then
              echo "‚úÖ Coverage generated"
              grep -oP 'filename.*?line-rate="\K[^"]+' coverage.xml | awk '{sum += $1} END {print "Avg coverage: " sum/NR*100 "%"}'
            else
              echo "‚ùå Coverage report not found"
            fi
            tail -20 ~/laravel.log || echo "No Laravel log found"
          EOF

      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage-report/
            coverage.xml
          retention-days: 1

      - name: Final Status Report
        if: always()
        run: |
          if [ "${{ job.status }}" == 'success' ]; then
            echo "‚úÖ Deployment complete"
          else
            echo "‚ö†Ô∏è Completed with warnings"
          fi
