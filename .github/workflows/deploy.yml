name: Deploy Laravel to Azure VM and Analyze with SonarCloud

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install npm dependencies
        run: npm install

      - name: Build assets
        run: npm run build

      - name: Setup SSH
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Test SSH Connection
        shell: bash
        run: |
          ssh -o ConnectTimeout=10 ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "echo 'SSH connection successful'"

      - name: Prepare Remote Environment
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          echo "🔧 Updating system and installing base packages..."
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y software-properties-common curl unzip git

          # Add PHP repository
          sudo add-apt-repository -y ppa:ondrej/php
          sudo apt update

          # Install PHP and required extensions
          sudo apt install -y \
            php8.2 \
            php8.2-fpm \
            php8.2-cli \
            php8.2-common \
            php8.2-mysql \
            php8.2-zip \
            php8.2-gd \
            php8.2-mbstring \
            php8.2-curl \
            php8.2-xml \
            php8.2-bcmath \
            php8.2-sqlite3 \
            nginx

          # Install Composer
          if ! command -v composer &> /dev/null; then
            curl -sS https://getcomposer.org/installer | php
            sudo mv composer.phar /usr/local/bin/composer
            sudo chmod +x /usr/local/bin/composer
          fi

          # Install MySQL Server
          sudo apt install -y mysql-server
          sudo systemctl start mysql
          sudo systemctl enable mysql
          EOF

      - name: Configure MySQL Database
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          echo "🔧 Configuring MySQL database..."

          # Create database and user
          sudo mysql << MYSQL_SCRIPT
          CREATE DATABASE IF NOT EXISTS laravel_app;
          CREATE USER IF NOT EXISTS 'laravel_user'@'localhost' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';
          GRANT ALL PRIVILEGES ON laravel_app.* TO 'laravel_user'@'localhost';
          FLUSH PRIVILEGES;
          MYSQL_SCRIPT

          echo "✅ MySQL database configured"
          EOF

      - name: Deploy Application Files
        shell: bash
        run: |
          # Create application directory if it doesn't exist
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "mkdir -p ~/laravel-app"

          # Deploy files using rsync
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            --exclude='.git' \
            --exclude='.env' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/views/*' \
            --exclude='node_modules' \
            --exclude='vendor' \
            --exclude='coverage-report' \
            --exclude='coverage.xml' \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/laravel-app/

      - name: Configure Laravel Application
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          cd ~/laravel-app

          echo "🔧 Setting up Laravel environment..."

          # Create .env file
          if [ ! -f .env ]; then
            cp .env.example .env

            # Configure database settings
            sed -i 's/DB_CONNECTION=sqlite/DB_CONNECTION=mysql/' .env
            sed -i 's/DB_HOST=127.0.0.1/DB_HOST=localhost/' .env
            sed -i 's/DB_PORT=3306/DB_PORT=3306/' .env
            sed -i 's/DB_DATABASE=laravel/DB_DATABASE=laravel_app/' .env
            sed -i 's/DB_USERNAME=root/DB_USERNAME=laravel_user/' .env
            sed -i "s/DB_PASSWORD=/DB_PASSWORD=${{ secrets.DB_PASSWORD }}/" .env
          fi

          # Install Composer dependencies
          echo "📦 Installing Composer dependencies..."
          composer install --no-dev --optimize-autoloader --no-interaction

          # Generate application key
          php artisan key:generate --force

          # Create required directories
          mkdir -p storage/framework/{cache,sessions,views}
          mkdir -p storage/logs
          mkdir -p bootstrap/cache

          # Set proper permissions
          sudo chown -R $USER:www-data storage bootstrap/cache
          sudo chmod -R 775 storage bootstrap/cache

          # Clear and cache configurations
          php artisan config:clear
          php artisan cache:clear
          php artisan view:clear
          php artisan config:cache

          # Run database migrations
          echo "🗃️ Running database migrations..."
          php artisan migrate --force

          # Optional: Seed database (uncomment if you have seeders)
          # php artisan db:seed --force

          echo "✅ Laravel application configured successfully"
          EOF

      - name: Configure Nginx
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          echo "🔧 Configuring Nginx..."

          # Create Nginx site configuration
          sudo tee /etc/nginx/sites-available/laravel > /dev/null << 'NGINX_CONFIG'
          server {
              listen 80;
              listen [::]:80;
              server_name _;
              root /home/${{ secrets.SSH_USERNAME }}/laravel-app/public;
              index index.php index.html index.htm;

              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;

              # Handle Laravel routes
              location / {
                  try_files $uri $uri/ /index.php?$query_string;
              }

              # Handle PHP files
              location ~ \.php$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/run/php/php8.2-fpm.sock;
                  fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
                  include fastcgi_params;
                  fastcgi_hide_header X-Powered-By;
              }

              # Deny access to hidden files
              location ~ /\. {
                  deny all;
              }

              # Deny access to sensitive files
              location ~* \.(env|log)$ {
                  deny all;
              }

              # Optimize static file serving
              location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
                  try_files $uri =404;
              }
          }
          NGINX_CONFIG

          # Enable the site and disable default
          sudo ln -sf /etc/nginx/sites-available/laravel /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default

          # Test Nginx configuration
          sudo nginx -t

          echo "✅ Nginx configured successfully"
          EOF

      - name: Start Services
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          echo "🚀 Starting services..."

          # Start and enable services
          sudo systemctl restart php8.2-fpm
          sudo systemctl enable php8.2-fpm
          sudo systemctl restart nginx
          sudo systemctl enable nginx

          # Check service status
          sudo systemctl is-active php8.2-fpm
          sudo systemctl is-active nginx

          echo "✅ Services started successfully"
          EOF

      - name: Run Tests and Generate Coverage
        shell: bash
        continue-on-error: true
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
          set +e
          cd ~/laravel-app

          echo "🧪 Running Laravel tests..."

          # Install dev dependencies for testing
          composer install --optimize-autoloader --no-interaction

          # Run tests with coverage if possible
          if [ -f "./vendor/bin/pest" ]; then
            ./vendor/bin/pest --coverage-clover=coverage.xml --coverage-html=coverage-report || true
          elif [ -f "./vendor/bin/phpunit" ]; then
            ./vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-html=coverage-report || true
          else
            echo "⚠️ No test runner found (pest or phpunit)"
          fi

          # Check if coverage was generated
          if [ -f coverage.xml ]; then
            echo "✅ Coverage report generated"
          else
            echo "⚠️ No coverage report generated"
          fi
          EOF

      - name: Download Coverage Reports
        shell: bash
        continue-on-error: true
        run: |
          # Download coverage files if they exist
          scp -r ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/laravel-app/coverage-report ./coverage-report/ 2>/dev/null || echo "No coverage-report directory found"
          scp ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/laravel-app/coverage.xml ./coverage.xml 2>/dev/null || echo "No coverage.xml found"

      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage-report/
            coverage.xml
          retention-days: 7
        continue-on-error: true

      - name: Health Check
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          echo "🏥 Performing health checks..."

          # Check if Laravel is responding
          cd ~/laravel-app

          # Test Laravel artisan commands
          php artisan --version

          # Check database connection
          php artisan migrate:status

          echo "✅ Application health check passed"
          EOF

      - name: Verify Website Accessibility
        run: |
          echo "🌐 Testing website accessibility..."
          sleep 5  # Give services time to fully start

          # Test the website
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SSH_HOST }}/ || echo "000")

          if [ "$response" = "200" ]; then
            echo "✅ Website is accessible and responding with HTTP 200"
          else
            echo "⚠️ Website responded with HTTP $response"
            echo "Checking server logs..."
            ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "sudo tail -20 /var/log/nginx/error.log" || true
          fi

      - name: Deployment Summary
        if: always()
        run: |
          echo "📋 Deployment Summary:"
          echo "- Repository: ${{ github.repository }}"
          echo "- Branch: ${{ github.ref_name }}"
          echo "- Commit: ${{ github.sha }}"
          echo "- Target Server: ${{ secrets.SSH_HOST }}"
          echo "- Application URL: http://${{ secrets.SSH_HOST }}/"

          if [ "${{ job.status }}" == 'success' ]; then
            echo "✅ Deployment completed successfully!"
          else
            echo "⚠️ Deployment completed with some warnings"
          fi
