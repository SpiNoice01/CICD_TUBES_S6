name: Deploy Laravel to Azure VM with SonarCloud Analysis

on:
  push:
    branches: [main]

env:
  APP_DIR: ~/laravel-app
  PHP_VERSION: 8.2
  DB_NAME: laravel_app
  DB_USER: laravel_user

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install and build assets
        run: |
          npm ci --no-audit
          npm run build --if-present

      - name: Configure SSH
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Validate SSH connection
        shell: bash
        run: |
          if ! ssh -o ConnectTimeout=10 ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "echo 'SSH connection established'"; then
            echo "::error::Failed to establish SSH connection"
            exit 1
          fi

      - name: Prepare server environment
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOSSH'
          set -euo pipefail

          echo "🛠️ Updating system packages..."
          sudo apt-get update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -y -qq

          echo "📦 Installing required packages..."
          sudo apt-get install -y -qq \
            software-properties-common \
            curl \
            unzip \
            git \
            nginx \
            mysql-server

          echo "➕ Adding PHP repository..."
          sudo add-apt-repository -y ppa:ondrej/php
          sudo apt-get update -qq

          echo "🐘 Installing PHP and extensions..."
          sudo apt-get install -y -qq \
            php${{ env.PHP_VERSION }} \
            php${{ env.PHP_VERSION }}-fpm \
            php${{ env.PHP_VERSION }}-cli \
            php${{ env.PHP_VERSION }}-common \
            php${{ env.PHP_VERSION }}-mysql \
            php${{ env.PHP_VERSION }}-zip \
            php${{ env.PHP_VERSION }}-gd \
            php${{ env.PHP_VERSION }}-mbstring \
            php${{ env.PHP_VERSION }}-curl \
            php${{ env.PHP_VERSION }}-xml \
            php${{ env.PHP_VERSION }}-bcmath \
            php${{ env.PHP_VERSION }}-sqlite3

          if ! command -v composer &>/dev/null; then
            echo "🎼 Installing Composer..."
            curl -sS https://getcomposer.org/installer | php -- --quiet
            sudo mv composer.phar /usr/local/bin/composer
            sudo chmod +x /usr/local/bin/composer
          fi

          echo "✅ Server environment prepared"
          EOSSH

      - name: Configure MySQL
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOSSH'
          set -euo pipefail

          echo "🗃️ Configuring MySQL database..."
          sudo mysql << 'EOMYSQL'
          CREATE DATABASE IF NOT EXISTS ${{ env.DB_NAME }} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
          CREATE USER IF NOT EXISTS '${{ env.DB_USER }}'@'localhost' IDENTIFIED BY '${{ secrets.DB_PASSWORD }}';
          GRANT ALL PRIVILEGES ON ${{ env.DB_NAME }}.* TO '${{ env.DB_USER }}'@'localhost';
          FLUSH PRIVILEGES;
          EOMYSQL

          echo "🔒 Securing MySQL installation..."
          sudo mysql_secure_installation << 'EOSECURE'
          n
          n
          n
          y
          y
          y
          EOSECURE

          echo "✅ MySQL configuration complete"
          EOSSH

      - name: Deploy application files
        shell: bash
        run: |
          echo "🚚 Deploying application files..."
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            --exclude='.git' \
            --exclude='.env' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/views/*' \
            --exclude='node_modules' \
            --exclude='vendor' \
            --exclude='coverage-report' \
            --exclude='coverage.xml' \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ env.APP_DIR }}/

      - name: Setup Laravel application
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOSSH'
          set -euo pipefail
          cd ${{ env.APP_DIR }}

          echo "🛠️ Configuring Laravel environment..."
          cp .env.example .env

          # Database configuration
          sed -i "s/DB_CONNECTION=.*/DB_CONNECTION=mysql/" .env
          sed -i "s/DB_HOST=.*/DB_HOST=localhost/" .env
          sed -i "s/DB_PORT=.*/DB_PORT=3306/" .env
          sed -i "s/DB_DATABASE=.*/DB_DATABASE=${{ env.DB_NAME }}/" .env
          sed -i "s/DB_USERNAME=.*/DB_USERNAME=${{ env.DB_USER }}/" .env
          sed -i "s/DB_PASSWORD=.*/DB_PASSWORD=${{ secrets.DB_PASSWORD }}/" .env

          # Optimize configuration
          echo "CACHE_DRIVER=file" >> .env
          echo "SESSION_DRIVER=file" >> .env
          echo "QUEUE_CONNECTION=sync" >> .env

          echo "📦 Installing Composer dependencies..."
          composer install --no-dev --optimize-autoloader --no-interaction --no-progress

          echo "🔑 Generating application key..."
          php artisan key:generate --force

          echo "📂 Setting up storage directories..."
          mkdir -p storage/framework/{cache,sessions,views}
          mkdir -p storage/logs
          mkdir -p bootstrap/cache
          chmod -R 775 storage bootstrap/cache
          chown -R $USER:www-data storage bootstrap/cache

          echo "🔄 Running database migrations..."
          php artisan migrate --force

          echo "🔗 Creating storage symlink..."
          php artisan storage:link || true

          echo "🧹 Clearing caches..."
          php artisan optimize:clear || true
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

          echo "✅ Laravel setup complete"
          EOSSH

      - name: Configure Nginx
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOSSH'
          set -euo pipefail

          echo "🌐 Configuring Nginx..."
          sudo tee /etc/nginx/sites-available/laravel > /dev/null << 'EONGINX'
          server {
              listen 80;
              listen [::]:80;
              server_name _;
              root ${{ env.APP_DIR }}/public;
              index index.php index.html index.htm;

              add_header X-Frame-Options "SAMEORIGIN";
              add_header X-XSS-Protection "1; mode=block";
              add_header X-Content-Type-Options "nosniff";

              location / {
                  try_files $uri $uri/ /index.php?$query_string;
              }

              location ~ \.php$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/run/php/php${{ env.PHP_VERSION }}-fpm.sock;
                  fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
                  include fastcgi_params;
              }

              location ~ /\.(?!well-known).* {
                  deny all;
              }

              location ~* \.(env|log)$ {
                  deny all;
              }

              location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
                  try_files $uri =404;
              }
          }
          EONGINX

          sudo ln -sf /etc/nginx/sites-available/laravel /etc/nginx/sites-enabled/
          sudo rm -f /etc/nginx/sites-enabled/default

          echo "🔍 Testing Nginx configuration..."
          sudo nginx -t

          echo "🔄 Restarting services..."
          sudo systemctl restart php${{ env.PHP_VERSION }}-fpm
          sudo systemctl restart nginx
          sudo systemctl enable php${{ env.PHP_VERSION }}-fpm
          sudo systemctl enable nginx

          echo "✅ Nginx configuration complete"
          EOSSH

      - name: Run tests and generate coverage
        shell: bash
        continue-on-error: true
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOSSH'
          set +e
          cd ${{ env.APP_DIR }}

          echo "🧪 Installing test dependencies..."
          composer install --optimize-autoloader --no-interaction --no-progress

          echo "🔍 Running tests with coverage..."
          if [ -f "./vendor/bin/pest" ]; then
            ./vendor/bin/pest --coverage-clover=coverage.xml --coverage-html=coverage-report || true
          elif [ -f "./vendor/bin/phpunit" ]; then
            ./vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-html=coverage-report || true
          else
            echo "⚠️ No test runner found"
          fi
          EOSSH

      - name: Retrieve coverage reports
        shell: bash
        continue-on-error: true
        run: |
          mkdir -p coverage-report
          scp ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ env.APP_DIR }}/coverage.xml ./coverage.xml || echo "No coverage.xml found"
          scp -r ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ env.APP_DIR }}/coverage-report ./ || echo "No coverage-report directory found"

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage.xml
            coverage-report/
          retention-days: 7

      - name: Analyze with SonarCloud
        uses: sonarsource/sonarcloud-github-action@master
        if: success() || failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=your-project-key
            -Dsonar.organization=your-org
            -Dsonar.php.coverage.reportPaths=coverage.xml
            -Dsonar.php.tests.reportPath=test-report.xml

      - name: Verify deployment
        shell: bash
        run: |
          echo "🔍 Verifying deployment..."
          max_retries=5
          retry_count=0
          sleep_seconds=10

          while [ $retry_count -lt $max_retries ]; do
            response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SSH_HOST }}/ || echo "000")

            if [ "$response" = "200" ]; then
              echo "✅ Website is accessible (HTTP 200)"
              exit 0
            fi

            retry_count=$((retry_count+1))
            echo "⚠️ Attempt $retry_count: Received HTTP $response, retrying in $sleep_seconds seconds..."
            sleep $sleep_seconds
          done

          echo "::error::Failed to verify deployment after $max_retries attempts"
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "sudo tail -30 /var/log/nginx/error.log" || true
          exit 1

      - name: Deployment summary
        if: always()
        run: |
          echo "📋 Deployment Summary"
          echo "-------------------"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Server: ${{ secrets.SSH_HOST }}"
          echo "Status: ${{ job.status }}"
          echo "Timestamp: $(date -u)"
          echo "Application URL: http://${{ secrets.SSH_HOST }}/"
          echo "SonarCloud URL: https://sonarcloud.io/dashboard?id=your-project-key"
