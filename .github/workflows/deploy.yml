name: Deploy Laravel to Azure VM and Analyze with SonarCloud

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup PHP environment # NEW - Add after Node.js steps
        run: |
          sudo apt-get update
          sudo apt-get install -y php-xdebug php-sqlite3
          echo "xdebug.mode=coverage" | sudo tee -a /etc/php/8.4/cli/conf.d/xdebug.ini
          echo "memory_limit=-1" >> php.ini

      - name: Install npm dependencies
        run: npm install

      - name: Build assets
        run: npm run build

      - name: Setup SSH
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "Host *" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Deploy Application via rsync
        shell: bash
        run: |
          rsync -avz --no-perms --no-owner --no-group --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            --exclude='.git' \
            --exclude='.env' \
            --exclude='storage/*' \
            --exclude='node_modules' \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/laravel-app/

      - name: Remote Setup & Deploy
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e

            cd ~/laravel-app

            sudo apt-get install -y php-xdebug
            echo "xdebug.mode=coverage" | sudo tee -a /etc/php/8.4/cli/conf.d/xdebug.ini

            echo "🔧 Fixing permissions..."
            sudo chown -R $USER:www-data storage bootstrap/cache
            sudo chmod -R 775 storage bootstrap/cache

            echo "🌱 Setting up environment..."
            if [ ! -f .env ]; then
              cp .env.example .env
              php artisan key:generate
              echo "✅ Application key generated and saved to .env"
            else
              echo "✅ .env already exists, skipping key generation"
            fi

            echo "📦 Installing PHP dependencies..."
            sudo apt-get update
            sudo apt-get install -y php-sqlite3 unzip curl
            if ! [ -x "$(command -v composer)" ]; then
              php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
              EXPECTED_SIGNATURE="$(php -r 'copy(\"https://composer.github.io/installer.sig\", \"php://stdout\");')"
              php -r "if (hash_file('sha384', 'composer-setup.php') === '$EXPECTED_SIGNATURE') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); exit(1); }"
              php composer-setup.php
              sudo mv composer.phar /usr/local/bin/composer
              sudo chmod +x /usr/local/bin/composer
              php -r "unlink('composer-setup.php');"
            fi

            composer install --no-dev --optimize-autoloader --ignore-platform-reqs

            echo "🗃️ Migrating database..."
            php artisan cache:table || true
            php artisan session:table || true
            php artisan migrate --force

            echo "🧹 Clearing caches..."
            php artisan config:clear
            php artisan cache:clear
            php artisan view:clear

            echo "♻️ Restarting services..."
            sudo systemctl restart nginx
            sudo systemctl restart php8.4-fpm
          EOF

      - name: Run PHPUnit tests with coverage
        shell: bash
        continue-on-error: true
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'ENDSSH'
            set -e
            cd ~/laravel-app

            echo "Current directory: $(pwd)"
            ls -la
            echo "Vendor contents:"
            ls -la vendor/bin || true

            sudo chown -R $USER:$USER .
            sudo chmod -R 755 .

            echo "Installing Composer dependencies..."
            composer install --no-interaction --no-dev --optimize-autoloader --ignore-platform-reqs

            if [ ! -f vendor/bin/pest ]; then
              echo "Pest not found! Installing Pest..."
              composer require pestphp/pest --dev --no-interaction --ignore-platform-reqs
              composer require pestphp/pest-plugin-laravel --dev --no-interaction --ignore-platform-reqs
            fi

            echo "Running tests..."
            ./vendor/bin/pest --coverage-clover=coverage.xml

            if [ ! -f coverage.xml ]; then
              echo "Error: coverage.xml was not generated!"
              exit 1
            fi

            cat coverage.xml
          ENDSSH

          scp ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/laravel-app/coverage.xml ./
