name: Deploy Laravel to Azure VM with Password Auth

on:
  push:
    branches: [main]

env:
  PHP_VERSION: "8.2"
  NODE_VERSION: "18"
  APP_DIR: "~/laravel-app"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install SSHpass for password authentication
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      - name: Configure system for file watching
        run: |
          echo "Increasing file watcher limits..."
          echo "fs.inotify.max_user_watches=524288" | sudo tee -a /etc/sysctl.conf
          echo "fs.inotify.max_user_instances=1024" | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "${{ env.NODE_VERSION }}"
          cache: "npm"

      - name: Deploy application files using password auth
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          # Install rsync if not present
          sudo apt-get install -y rsync

          sshpass -e rsync -avz --no-perms --no-owner --no-group --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            --exclude={.git,.env,storage/*,node_modules,.idea} \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ env.APP_DIR }}/

      - name: Setup server environment
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'REMOTE_SCRIPT'
          set -euo pipefail

          # Helper function
          fail() { echo "‚ùå Error: $1" >&2; exit 1; }

          echo "üõ†Ô∏è Updating packages..."
          sudo apt-get update -y || fail "Failed to update packages"

          echo "üì¶ Installing PHP ${{ env.PHP_VERSION }}..."
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository ppa:ondrej/php -y
          sudo apt-get update -y
          sudo apt-get install -y \
            php${{ env.PHP_VERSION }} \
            php${{ env.PHP_VERSION }}-{cli,mbstring,xml,bcmath,curl,zip,mysql,sqlite3} \
            unzip curl nginx || fail "PHP installation failed"

          echo "üì¶ Installing Node.js..."
          curl -fsSL https://deb.nodesource.com/setup_${{ env.NODE_VERSION }}.x | sudo -E bash -
          sudo apt-get install -y nodejs || fail "Node.js installation failed"

          echo "üîß Setting up application..."
          cd ${{ env.APP_DIR }} || fail "App directory not found"

          # Install dependencies
          composer install --optimize-autoloader --no-interaction --ignore-platform-reqs
          npm ci

          # Environment setup
          if [ ! -f .env ]; then
            cp .env.example .env
            php artisan key:generate
          fi

          # Database and permissions
          php artisan migrate --force
          sudo chown -R $USER:www-data storage bootstrap/cache
          sudo chmod -R ug+rwx storage bootstrap/cache
          php artisan config:clear
          php artisan view:clear
          php artisan cache:clear

          echo "‚úÖ Server setup completed"
          REMOTE_SCRIPT

      - name: Start application servers
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'REMOTE_SCRIPT'
          set -euo pipefail

          cd ${{ env.APP_DIR }}

          # Stop existing processes
          pkill -f "php artisan serve" || true
          pkill -f "vite" || true

          # Start servers
          nohup php artisan serve --host=0.0.0.0 --port=8080 > ~/laravel.log 2>&1 &
          nohup npm run dev -- --host 0.0.0.0 > ~/vite.log 2>&1 &

          sleep 10  # Wait for servers to start

          # Verify servers
          curl -s http://localhost:8080 | grep -q '<!DOCTYPE' || {
            echo "‚ùå Laravel server failed"
            tail -n 20 ~/laravel.log
            exit 1
          }

          VITE_PORT=$(grep -oP 'Network: http://.*:\K[0-9]+' ~/vite.log | head -n 1)
          curl -s http://localhost:$VITE_PORT/@vite/client | grep -q 'vite' || {
            echo "‚ùå Vite server failed"
            tail -n 20 ~/vite.log
            exit 1
          }

          echo "üåê Application URLs:"
          echo "Laravel: http://${{ secrets.SSH_HOST }}:8080"
          echo "Vite: http://${{ secrets.SSH_HOST }}:$VITE_PORT"
          REMOTE_SCRIPT

      - name: Run tests
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        continue-on-error: true
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'REMOTE_SCRIPT'
          set +e
          cd ${{ env.APP_DIR }}
          ./vendor/bin/pest --coverage-html=coverage-report --coverage-clover=coverage.xml
          REMOTE_SCRIPT

      - name: Download coverage reports
        env:
          SSHPASS: ${{ secrets.SSH_PASSWORD }}
        run: |
          sshpass -e scp -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ env.APP_DIR }}/coverage-report/ ./ \
            || echo "No coverage report found"

          sshpass -e scp -o StrictHostKeyChecking=no \
            ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ env.APP_DIR }}/coverage.xml ./ \
            || echo "No coverage.xml found"

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage-report/
            coverage.xml
          retention-days: 1

      - name: Deployment status
        run: |
          if [ "${{ job.status }}" == 'success' ]; then
            echo "üöÄ Deployment successful!"
          else
            echo "‚ö†Ô∏è Deployment completed with warnings"
          fi
