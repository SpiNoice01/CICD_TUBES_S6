name: Deploy Laravel to Azure VM and Analyze with SonarCloud

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install npm dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          printf "%s\n" "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          echo -e "Host *\n  StrictHostKeyChecking no" > ~/.ssh/config

      - name: Deploy with rsync
        run: |
          rsync -avz --no-perms --no-owner --no-group --delete \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            --exclude='.git' \
            --exclude='.env' \
            --exclude='storage/*' \
            --exclude='node_modules' \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/laravel-app/

      - name: Remote Setup & Deploy
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            cd ~/laravel-app

            echo "üîß Fixing permissions..."
            sudo chown -R $USER:www-data storage bootstrap/cache
            sudo chmod -R ug+rwx storage bootstrap/cache

            echo "üå± Setting up environment..."
            if [ ! -f .env ]; then
              cp .env.example .env
              php artisan key:generate
            fi

            echo "üì¶ Installing PHP dependencies..."
            sudo apt-get update
            sudo apt-get install -y unzip curl php-sqlite3

            if ! command -v composer &> /dev/null; then
              php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
              php composer-setup.php
              sudo mv composer.phar /usr/local/bin/composer
              sudo chmod +x /usr/local/bin/composer
              rm composer-setup.php
            fi

            composer install --optimize-autoloader --ignore-platform-reqs
            composer require pestphp/pest pestphp/pest-plugin-laravel --dev --no-interaction --ignore-platform-reqs

            echo "üóÉÔ∏è Migrating database..."
            php artisan cache:table || true
            php artisan session:table || true
            php artisan migrate --force

            echo "üßπ Clearing caches..."
            php artisan config:clear
            php artisan cache:clear
            php artisan view:clear
          EOF

      - name: Start Laravel App
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            echo "‚ôªÔ∏è Restarting services..."
            sudo systemctl restart nginx
            sudo systemctl restart php8.4-fpm

            echo "üöÄ Running Laravel dev server..."
            cd ~/laravel-app
            sudo pkill -f "php artisan serve" || true
            nohup php artisan serve --host=0.0.0.0 --port=8000 > ~/laravel.log 2>&1 &
          EOF

      - name: Verify Services
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            sudo systemctl is-active nginx || (echo "Nginx is not running!" && exit 1)
            sudo systemctl is-active php8.4-fpm || (echo "PHP-FPM is not running!" && exit 1)
            curl -sSf http://localhost:8000 || (echo "Laravel not responding!" && exit 1)
          EOF

      - name: Run Tests and Generate Coverage
        continue-on-error: true
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set +e
            cd ~/laravel-app
            ./vendor/bin/pest --coverage-html=coverage-report --coverage-clover=coverage.xml || true
            if [ -f coverage.xml ]; then
              echo "‚úÖ Coverage generated"
              grep -oP 'filename.*?line-rate="\K[^"]+' coverage.xml | awk '{sum += $1} END {print "Avg coverage: " sum/NR*100 "%"}'
            else
              echo "‚ùå Coverage report not found"
            fi
            tail -20 ~/laravel.log || echo "No Laravel log found"
          EOF

      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage-report/
            coverage.xml
          retention-days: 1

      - name: Final Status Report
        if: always()
        run: |
          if [ "${{ job.status }}" == 'success' ]; then
            echo "‚úÖ Deployment complete"
          else
            echo "‚ö†Ô∏è Completed with warnings"
          fi

      - name: Verify Website Accessibility
        run: |
          curl -sSf http://${{ secrets.SSH_HOST }}:8000 || (echo "‚ùå Website is not accessible!" && exit 1)
