name: CI/CD Pipeline - Laravel Deployment & Analysis

on:
  push:
    branches: [main]

env:
  APP_DIR: ~/laravel-app
  PHP_VERSION: "8.2"
  NODE_VERSION: "18"

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install and build frontend assets
        run: |
          npm ci --prefer-offline
          npm run build --if-present

      - name: Configure SSH
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
          echo -e "Host *\n  StrictHostKeyChecking no\n  UserKnownHostsFile ~/.ssh/known_hosts" > ~/.ssh/config

      - name: Deploy application files
        run: |
          rsync -avz --no-perms --no-owner --no-group --delete \
            -e "ssh -i ~/.ssh/id_rsa" \
            --exclude={'.git','.env','storage/*','node_modules','.github'} \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:${{ env.APP_DIR }}/

      - name: Setup remote environment
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'REMOTE_SCRIPT'
            set -eo pipefail

            # System dependencies
            echo "üõ†Ô∏è Installing system dependencies..."
            sudo apt-get update -qq
            sudo apt-get install -y --no-install-recommends \
              software-properties-common \
              unzip \
              curl

            # PHP setup
            echo "üîß Installing PHP ${{ env.PHP_VERSION }}..."
            sudo add-apt-repository ppa:ondrej/php -y
            sudo apt-get update -qq
            sudo apt-get install -y --no-install-recommends \
              php${{ env.PHP_VERSION }} \
              php${{ env.PHP_VERSION }}-{cli,mbstring,xml,bcmath,curl,zip,mysql,sqlite3,fpm}

            sudo update-alternatives --set php /usr/bin/php${{ env.PHP_VERSION }}

            # Composer setup
            echo "üì¶ Installing Composer..."
            if ! command -v composer &> /dev/null; then
              EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
              php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
              ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"

              if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
                >&2 echo '‚ùå Composer installer checksum verification failed!'
                exit 1
              fi

              php composer-setup.php --quiet
              sudo mv composer.phar /usr/local/bin/composer
              rm composer-setup.php
            fi

            # Application setup
            cd ${{ env.APP_DIR }}

            echo "üîê Setting file permissions..."
            mkdir -p storage/framework/{cache,sessions,views}
            sudo chown -R $USER:www-data storage bootstrap/cache
            sudo chmod -R ug+rwx storage bootstrap/cache

            echo "üå± Configuring environment..."
            [ -f .env ] || cp .env.example .env
            grep -q '^APP_KEY=' .env || php artisan key:generate

            echo "üì¶ Installing backend dependencies..."
            composer install --optimize-autoloader --no-interaction --ignore-platform-reqs

            echo "üîß Running database migrations..."
            php artisan migrate --force --no-interaction

            echo "üßπ Clearing caches..."
            php artisan optimize:clear
          REMOTE_SCRIPT

      - name: Start application services
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'REMOTE_SCRIPT'
            set -eo pipefail
            cd ${{ env.APP_DIR }}

            # Stop existing services
            echo "üõë Stopping any existing services..."
            pkill -f "php artisan serve" || true
            pkill -f "vite" || true

            # Start Laravel
            echo "üöÄ Starting Laravel server..."
            nohup php artisan serve --host=0.0.0.0 --port=8080 > laravel.log 2>&1 &

            # Start Vite
            echo "‚ö° Starting Vite dev server..."
            nohup npm run dev -- --host 0.0.0.0 --port=5173 > vite.log 2>&1 &

            echo "‚úÖ Services started successfully"
          REMOTE_SCRIPT

      - name: Verify services
        run: |
          echo "üîç Verifying services..."
          for port in 8080 5173; do
            if ! curl -sSf --retry 3 --retry-delay 5 http://${{ secrets.SSH_HOST }}:$port; then
              echo "‚ùå Service on port $port not responding!"
              exit 1
            fi
          done

      - name: Run tests and generate coverage
        continue-on-error: true
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'REMOTE_SCRIPT'
            set -eo pipefail
            cd ${{ env.APP_DIR }}

            echo "üß™ Running tests with coverage..."
            ./vendor/bin/pest --coverage-html=coverage-report --coverage-clover=coverage.xml || true

            if [ -f coverage.xml ]; then
              COVERAGE=$(grep -oP 'filename.*?line-rate="\K[^"]+' coverage.xml | awk '{sum += $1} END {print sum/NR*100}')
              echo "üìä Test Coverage: ${COVERAGE}%"
            else
              echo "‚ö†Ô∏è No coverage report generated"
            fi
          REMOTE_SCRIPT

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            coverage-report/
            coverage.xml
          retention-days: 7

      - name: Post-deployment status
        if: always()
        run: |
          case "${{ job.status }}" in
            success) echo "‚úÖ Deployment successful" ;;
            failure) echo "‚ùå Deployment failed!" ;;
            cancelled) echo "üü† Deployment cancelled" ;;
            *) echo "üü° Deployment completed with status: ${{ job.status }}" ;;
          esac
