name: Deploy Laravel to Azure VM

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  APP_ENV: production
  COMPOSER_NO_INTERACTION: 1

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install npm dependencies
        run: npm ci

      - name: Build assets
        run: npm run build --if-present

      - name: Setup SSH
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          cat > ~/.ssh/config <<EOF
          Host *
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            LogLevel ERROR
          EOF

      - name: Validate SSH connection
        run: |
          ssh -T ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} echo "SSH connection successful"

      - name: Deploy Application via rsync
        run: |
          rsync -avz --no-perms --no-owner --no-group --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            --exclude='.git' \
            --exclude='.env' \
            --exclude='storage/*' \
            --exclude='node_modules' \
            --exclude='tests' \
            --exclude='.github' \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/laravel-app/

      - name: Remote Setup & Deploy
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -euo pipefail

            cd ~/laravel-app

            echo "🔧 Setting up environment..."
            if [ ! -f .env ]; then
              cp .env.example .env
              php artisan key:generate
              echo "✅ .env created and application key generated"
            fi

            echo "📦 Installing system dependencies..."
            sudo apt-get update -qq
            sudo apt-get install -y --no-install-recommends php-sqlite3 unzip

            echo "🔄 Installing Composer dependencies..."
            if ! command -v composer &> /dev/null; then
              php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
              php composer-setup.php --quiet
              sudo mv composer.phar /usr/local/bin/composer
              rm composer-setup.php
            fi

            composer install --no-dev --optimize-autoloader --ignore-platform-reqs --no-interaction

            echo "🗃️ Running database migrations..."
            php artisan migrate --force

            echo "🧹 Optimizing application..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            echo "🔒 Setting permissions..."
            sudo chown -R $USER:www-data storage bootstrap/cache
            sudo chmod -R 775 storage bootstrap/cache

            echo "♻️ Restarting services..."
            sudo systemctl restart nginx
            sudo systemctl restart php8.4-fpm
          EOF

  run-tests:
    name: Run Tests
    needs: deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: "rootpassword" # Set a valid password
          MYSQL_DATABASE: kanh2553_campfires
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, dom, fileinfo, mysql, pcov
          coverage: pcov
          tools: composer:v2

      - name: Install dependencies
        run: |
          composer install --no-interaction --prefer-dist --optimize-autoloader
          composer require pestphp/pest --dev --no-interaction
          composer require pestphp/pest-plugin-laravel --dev --no-interaction

      - name: Prepare environment
        run: |
          cp .env.example .env.testing
          php artisan key:generate --env=testing
          echo "DB_CONNECTION=mysql" >> .env.testing
          echo "DB_HOST=127.0.0.1" >> .env.testing
          echo "DB_PORT=3306" >> .env.testing
          echo "DB_DATABASE=kanh2553_campfires" >> .env.testing
          echo "DB_USERNAME=root" >> .env.testing
          echo "DB_PASSWORD=rootpassword" >> .env.testing  # Use the same password

      - name: Wait for MySQL to be ready
        run: |
          while ! mysqladmin ping -h127.0.0.1 -uroot -prootpassword --silent; do
            sleep 1
          done

      - name: Print MySQL service logs
        run: |
          docker logs mysql

      - name: Run migrations
        run: |
          php artisan migrate --force

      - name: Run tests
        run: |
          php artisan config:clear
          php artisan cache:clear
          XDEBUG_MODE=coverage ./vendor/bin/pest --coverage-clover=coverage.xml

      - name: Upload coverage to SonarCloud
        if: github.event_name == 'push'
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=SpiNoice01_CICD_TUBES_S6
            -Dsonar.organization=spinoice01
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.php.coverage.reportPaths=coverage.xml
