name: Deploy Laravel to Azure VM and Analyze with SonarCloud

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install npm dependencies
        run: npm install

      - name: Build assets
        run: npm run build

      - name: Setup SSH
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "Host *" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Deploy Application via rsync
        shell: bash
        run: |
          rsync -avz --no-perms --no-owner --no-group --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            --exclude='.git' \
            --exclude='.env' \
            --exclude='storage/*' \
            --exclude='node_modules' \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/laravel-app/

      - name: Remote Setup & Deploy
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            cd ~/laravel-app
            sudo chown -R $USER:www-data storage bootstrap/cache
            sudo chmod -R 775 storage bootstrap/cache

            if [ ! -f .env ]; then
              cp .env.example .env
              php artisan key:generate
            fi

            sudo apt-get update
            sudo apt-get install -y php-sqlite3 unzip curl

            if ! [ -x "$(command -v composer)" ]; then
              php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
              php composer-setup.php
              sudo mv composer.phar /usr/local/bin/composer
              php -r "unlink('composer-setup.php');"
            fi

            composer install --optimize-autoloader --ignore-platform-reqs
            composer require pestphp/pest pestphp/pest-plugin-laravel --dev --no-interaction --ignore-platform-reqs

            php artisan cache:table || true
            php artisan session:table || true
            php artisan migrate --force

            php artisan config:clear
            php artisan cache:clear
            php artisan view:clear
          EOF

      - name: Start Application Services
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            sudo systemctl restart nginx
            sudo systemctl restart php8.2-fpm

            cd ~/laravel-app
            sudo pkill -f "php artisan serve" || true
            nohup php artisan serve --host=0.0.0.0 --port=8000 > ~/laravel.log 2>&1 &
            disown
          EOF

      - name: Verify Services
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            sudo systemctl is-active nginx || (echo "Nginx is not running!" && exit 1)
            sudo systemctl is-active php8.2-fpm || (echo "PHP-FPM is not running!" && exit 1)
            curl -sSf http://localhost:8000 || (echo "Laravel server not responding!" && exit 1)
          EOF

      - name: Run Tests and Generate Coverage
        shell: bash
        continue-on-error: true
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set +e
            cd ~/laravel-app
            ./vendor/bin/pest --coverage-html=coverage-report --coverage-clover=coverage.xml || true
            if [ -f coverage.xml ]; then
              echo "✅ Coverage report generated"
              grep -oP 'filename.*?line-rate="\K[^"]+' coverage.xml | \
                awk '{sum += $1; count++} END {print "Average coverage: " sum/count*100 "%"}'
            fi
            tail -20 ~/laravel.log || echo "No Laravel log found"
          EOF

      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage-report/
            coverage.xml
          retention-days: 1

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

      - name: Final Status Report
        if: always()
        run: |
          if [ "${{ job.status }}" == 'success' ]; then
            echo "✅ All steps completed successfully"
          else
            echo "⚠️ Workflow completed with warnings"
          fi

      - name: Verify Website Accessibility
        run: |
          curl -sSf http://${{ secrets.SSH_HOST }}:8000 || (echo "❌ Website is not accessible!" && exit 1)
