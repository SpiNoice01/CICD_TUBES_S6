name: Deploy Laravel ke Azure VM and Analyze with SonarCloud

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install npm dependencies
        run: npm install

      - name: Build assets
        run: npm run build

      - name: Setup SSH
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "Host *" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Deploy Application via rsync
        shell: bash
        run: |
          rsync -avz --no-perms --no-owner --no-group --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            --exclude='.git' \
            --exclude='.env' \
            --exclude='storage/*' \
            --exclude='node_modules' \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/laravel-app/

      - name: Remote Setup & Deploy
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            cd ~/laravel-app
            echo "üîß Installing PHP if needed..."
            sudo apt-get update
            sudo apt-get install -y php php-cli php-fpm php-mbstring php-xml php-curl php-zip php-sqlite3 unzip curl

            echo "üîß Fixing permissions..."
            sudo chown -R $USER:www-data storage bootstrap/cache
            sudo chmod -R 775 storage bootstrap/cache

            echo "üì¶ Installing Composer if needed..."
            if ! [ -x "$(command -v composer)" ]; then
              php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
              EXPECTED_SIGNATURE="$(curl -s https://composer.github.io/installer.sig)"
              ACTUAL_SIGNATURE="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"
              if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]; then
                echo 'ERROR: Invalid installer signature'
                rm composer-setup.php
                exit 1
              fi
              php composer-setup.php
              sudo mv composer.phar /usr/local/bin/composer
              sudo chmod +x /usr/local/bin/composer
              rm composer-setup.php
            fi

            echo "Installing Composer dependencies..."
            composer install --optimize-autoloader --ignore-platform-reqs
            sudo chown -R $USER:www-data vendor
            sudo chmod -R 775 vendor

            echo "üå± Setting up environment..."
            if [ ! -f .env ]; then
              cp .env.example .env
            fi
            # ALWAYS generate key if empty or missing!
            if ! grep -q '^APP_KEY=.\+' .env; then
              php artisan key:generate
              echo "‚úÖ Application key generated and saved to .env"
            else
              echo "‚úÖ APP_KEY already set in .env, skipping key generation"
            fi

            echo "Installing test dependencies..."
            composer require pestphp/pest pestphp/pest-plugin-laravel --dev --no-interaction --ignore-platform-reqs

            echo "üóÉÔ∏è Migrating database..."
            php artisan cache:table || true
            php artisan session:table || true
            php artisan migrate --force

            echo "üßπ Clearing caches..."
            php artisan config:clear
            php artisan cache:clear

            mkdir -p storage/framework/views
            chmod -R 775 storage/framework/views
            php artisan view:clear || echo "‚ö†Ô∏è View path not found. Skipping view:clear."
          EOF

      - name: Start Application Services
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            echo "‚ôªÔ∏è Restarting services..."

            # Restart nginx, show error log if failed
            if ! sudo systemctl restart nginx; then
              echo "‚ùå Nginx restart failed! Showing status and error log:"
              sudo systemctl status nginx || true
              sudo tail -40 /var/log/nginx/error.log || true
            else
              echo "‚úÖ Nginx restarted."
            fi

            # Restart PHP-FPM (try common versions)
            sudo systemctl restart php8.3-fpm || \
            sudo systemctl restart php8.2-fpm || \
            sudo systemctl restart php8.1-fpm || \
            sudo systemctl restart php-fpm || \
            echo "‚ö†Ô∏è PHP-FPM restart skipped (adjust version)"

            echo "üöÄ Starting Laravel development server..."
            cd ~/laravel-app
            sudo pkill -f "php artisan serve" || true
            nohup php artisan serve --host=0.0.0.0 --port=8000 > ~/laravel.log 2>&1 &
            disown
          EOF

      - name: Verify Services
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            echo "‚úÖ Checking services..."
            sudo systemctl is-active nginx || (echo "Nginx is not running!" && exit 1)
            sudo systemctl is-active php8.3-fpm || \
            sudo systemctl is-active php8.2-fpm || \
            sudo systemctl is-active php8.1-fpm || \
            sudo systemctl is-active php-fpm || \
            (echo "PHP-FPM is not running!" && exit 1)
            echo "üåê Checking web server..."
            if ! curl -sSf http://localhost:8000 ; then
              echo "‚ùå Laravel server not responding! Printing last 40 lines of laravel.log:"
              tail -n 40 ~/laravel-app/storage/logs/laravel.log || echo "No Laravel log found"
              exit 1
            fi
          EOF

      - name: Run Tests and Generate Coverage
        shell: bash
        continue-on-error: true
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set +e
            cd ~/laravel-app
            php -v
            php -m | grep -E 'xdebug|pcov'
            echo "üîç Running tests (may fail but will still generate coverage)..."
            ./vendor/bin/pest --version || echo "Pest not installed"
            ./vendor/bin/pest --coverage-html=coverage-report --coverage-clover=coverage.xml || true
            echo "üìä Test execution completed (ignoring failures)"
            ls -lh coverage.xml || echo "No coverage.xml generated"
            ls -lh coverage-report || echo "No coverage-report dir"
            if [ -f coverage.xml ]; then
              echo "‚úÖ Coverage report generated successfully"
              echo "Coverage Summary:"
              grep -oP 'filename.*?line-rate="\K[^"]+' coverage.xml | \
                awk '{sum += $1; count++} END {if(count>0){print "Average coverage: " sum/count*100 "%"} else {print "No coverage data found"}}'
            else
              echo "‚ùå Failed to generate coverage report"
              exit 0
            fi
            echo "üìù Last 20 lines of Laravel log:"
            tail -20 ~/laravel.log || echo "No Laravel log found"
          EOF

      - name: Download Coverage Report from VM
        if: always()
        run: |
          scp -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/laravel-app/coverage.xml . || true
          scp -r -o StrictHostKeyChecking=no ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/laravel-app/coverage-report . || true

      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage-report/
            coverage.xml
          retention-days: 1

      - name: Final Status Report
        if: always()
        run: |
          if [ "${{ job.status }}" == 'success' ]; then
            echo "‚úÖ All steps completed successfully"
          else
            echo "‚ö†Ô∏è Workflow completed with warnings (some non-critical steps failed)"
            echo "Coverage reports should still be available in artifacts"
          fi

      - name: Verify Website Accessibility
        run: |
          curl -sSf http://${{ secrets.SSH_HOST }}:8000 || (echo "‚ùå Website is not accessible!" && exit 1)
