name: Deploy Laravel to Azure VM and Analyze with SonarCloud

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: xdebug, sqlite3
          coverage: xdebug

      - name: Install npm dependencies
        run: npm install

      - name: Build assets
        run: npm run build

      - name: Setup SSH
        shell: bash
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "Host *" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Deploy Application via rsync
        shell: bash
        run: |
          rsync -avz --no-perms --no-owner --no-group --delete --delete-excluded \
            -e "ssh -o StrictHostKeyChecking=no" \
            --exclude='.git' \
            --exclude='.env' \
            --exclude='storage/*' \
            --exclude='node_modules' \
            ./ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/laravel-app/

      - name: Remote Setup & Deploy
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e

            cd ~/laravel-app

            echo "üîß Fixing permissions..."
            sudo chown -R $USER:www-data storage bootstrap/cache
            sudo chmod -R 775 storage bootstrap/cache

            echo "üå± Setting up environment..."
            if [ ! -f .env ]; then
              cp .env.example .env
              php artisan key:generate
              echo "‚úÖ Application key generated and saved to .env"
            else
              echo "‚úÖ .env already exists, skipping key generation"
            fi

            echo "üì¶ Installing PHP dependencies..."
            sudo apt-get update
            sudo apt-get install -y php-xdebug php-sqlite3 unzip curl zip
            sudo systemctl restart php8.2-fpm

            if ! command -v composer &> /dev/null; then
              php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
              EXPECTED_SIGNATURE=$(curl -s https://composer.github.io/installer.sig)
              ACTUAL_SIGNATURE=$(php -r "echo hash_file('sha384', 'composer-setup.php');")
              if [ "$EXPECTED_SIGNATURE" != "$ACTUAL_SIGNATURE" ]; then
                echo 'ERROR: Invalid installer signature'
                rm composer-setup.php
                exit 1
              fi
              php composer-setup.php
              sudo mv composer.phar /usr/local/bin/composer
              sudo chmod +x /usr/local/bin/composer
              rm composer-setup.php
            fi

            echo "Installing Composer dependencies..."
            composer install --optimize-autoloader --ignore-platform-reqs

            echo "Installing test dependencies..."
            composer require pestphp/pest pestphp/pest-plugin-laravel --dev --no-interaction --ignore-platform-reqs

            echo "üóÉÔ∏è Migrating database..."
            php artisan cache:table || true
            php artisan session:table || true
            php artisan migrate --force

            echo "üßπ Clearing caches..."
            php artisan config:clear
            php artisan cache:clear
            php artisan view:clear
          EOF

      - name: Start Application Services
        shell: bash
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            echo "‚ôªÔ∏è Restarting services..."
            sudo systemctl restart nginx
            sudo systemctl restart php8.2-fpm

            echo "üöÄ Starting Laravel development server..."
            cd ~/laravel-app
            sudo pkill -f "php artisan serve" || true
            nohup php artisan serve --host=0.0.0.0 --port=8000 > ~/laravel.log 2>&1 &
            disown
          EOF

      - name: Verify Services
        shell: bash
        continue-on-error: true
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set +e
            echo "‚úÖ Checking services..."
            sudo systemctl is-active nginx || echo "‚ö†Ô∏è Nginx is not running!"
            sudo systemctl is-active php8.2-fpm || echo "‚ö†Ô∏è PHP-FPM is not running!"

            echo "üåê Checking web server..."
            curl -sSf http://localhost:8000 || echo "‚ö†Ô∏è Laravel server not responding!"
          EOF

      - name: Run Tests and Generate Coverage
        shell: bash
        continue-on-error: true
        run: |
          ssh ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            cd ~/laravel-app

            mkdir -p coverage-report

            echo "Running tests with coverage (Pest)..."
            XDEBUG_MODE=coverage ./vendor/bin/pest --coverage-html=coverage-report --coverage-clover=coverage.xml || true

            if [ ! -f coverage.xml ]; then
              echo "Trying PHPUnit as fallback..."
              XDEBUG_MODE=coverage ./vendor/bin/phpunit --coverage-html coverage-report --coverage-clover coverage.xml || true
            fi

            if [ -f coverage.xml ]; then
              echo "Coverage generation successful!"
              zip -r coverage-artifacts.zip coverage-report/ coverage.xml
            else
              echo "Failed to generate coverage reports"
              exit 1
            fi
          EOF

      - name: Download Coverage Reports
        if: always()
        shell: bash
        run: |
          scp ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/laravel-app/coverage-artifacts.zip ./ || echo "No coverage artifacts found"

          if [ -f coverage-artifacts.zip ]; then
            unzip coverage-artifacts.zip -d coverage-reports
            echo "Coverage files downloaded:"
            ls -la coverage-reports/
          fi

      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: coverage-reports/
          retention-days: 1

      - name: Final Status Report
        if: always()
        run: |
          if [ "${{ job.status }}" == 'success' ]; then
            echo "‚úÖ All steps completed successfully"
          else
            echo "‚ö†Ô∏è Workflow completed with warnings (some non-critical steps failed)"
            echo "Coverage reports should still be available in artifacts"
          fi

      - name: Verify Website Accessibility
        continue-on-error: true
        run: |
          curl -sSf http://${{ secrets.SSH_HOST }}:8000 || echo "‚ùå Website is not accessible!"
